# cloudbuild.yaml
substitutions:
  _SERVICE_NAME: line-weather-bot
  _REGION: asia-east1

steps:
  # 步驟 1: 建置 Docker 映像檔
  # gcr.io/cloud-builders/docker 是 Cloud Build 提供的 Docker 建置器
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'build'
      - '--no-cache'   # <--- 關鍵！強制不要用 cache
      - '-f'
      - 'Dockerfile'
      - '-t'
      - 'gcr.io/$PROJECT_ID/$_SERVICE_NAME:$BUILD_ID'
      - '.'
    secretEnv: ['_LINE_CHANNEL_ACCESS_TOKEN'] # <-- 告訴 Cloud Build 需要這個環境變數

  # 步驟 2: 將建置好的 Docker 映像檔推送到 Google Container Registry (GCR)
  # 這一步會自動將映像檔推送到 gcr.io/[你的專案ID]/my-python-app
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/$_SERVICE_NAME:$BUILD_ID']

  # （選擇性）自動部署到 Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '$_SERVICE_NAME'
      - '--image'
      - 'gcr.io/$PROJECT_ID/$_SERVICE_NAME:$BUILD_ID'
      - '--region'
      - '$_REGION'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--set-secrets'
      - 'LINE_CHANNEL_ACCESS_TOKEN=LINE_CHANNEL_ACCESS_TOKEN:latest'

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/LINE_CHANNEL_ACCESS_TOKEN/versions/latest
    env: '_LINE_CHANNEL_ACCESS_TOKEN'

# 選擇性: 儲存建置好的 Docker 映像檔
# 這會讓 Cloud Build 自動將映像檔推送到 Artifact Registry
images:
  - 'gcr.io/$PROJECT_ID/$_SERVICE_NAME:$BUILD_ID'