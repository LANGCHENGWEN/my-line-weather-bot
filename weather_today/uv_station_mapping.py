# weather_today/uv_station_mapping.py
from utils.text_processing import normalize_city_name

# 台灣主要縣市與其代表性紫外線測站 ID 的映射表。
# 這些 StationID 來自中央氣象署 O-A0005-001 紫外線指數 API。
# 請注意：此映射表是基於常見縣市與其代表性測站的推斷，
# 實際應用中建議根據用戶的精確位置選擇最近的測站，或使用更全面的測站資料。

UV_STATION_MAPPING = {
    # 北部地區
    "基隆市": "C0B180",   # 基隆 (請核對此 ID 是否為有效紫外線測站ID)
    "臺北市": "466920",   # 臺北氣象站 (對應 JSON 中的 "466920")
    "台北市": "466920",   # 兼容別名
    "新北市": "C0AC60",   # 板橋 (請核對此 ID 是否為有效紫外線測站ID)
    "桃園市": "C0BC00",   # 桃園 (請核對此 ID 是否為有效紫外線測站ID)
    "新竹市": "467571",   # 新竹氣象站 (對應 JSON 中的 "467571")
    "新竹縣": "C0D660",   # 竹北 (請核對此 ID 是否為有效紫外線測站ID)
    
    # 中部地區
    "苗栗縣": "C0E640",   # 苗栗 (請核對此 ID 是否為有效紫外線測站ID)
    "臺中市": "467490",   # 臺中氣象站 (對應 JSON 中的 "467490")
    "台中市": "467490",   # 兼容別名
    "彰化縣": "C0F9A0",   # 彰化 (請核對此 ID 是否為有效紫外線測站ID)
    "南投縣": "467650",   # 日月潭氣象站 (對應 JSON 中的 "467650")
    "雲林縣": "C0N180",   # 斗六 (請核對此 ID 是否為有效紫外線測站ID)
    "嘉義市": "467480",   # 嘉義氣象站 (對應 JSON 中的 "467480")
    "嘉義縣": "467480",   # 嘉義縣通常也會使用嘉義市的氣象站，或選擇阿里山測站（如果它也提供紫外線數據且有明確ID）
    
    # 南部地區
    "臺南市": "467410",   # 臺南氣象站 (對應 JSON 中的 "467410")
    "台南市": "467410",   # 兼容別名
    "高雄市": "467440",   # 高雄氣象站 (對應 JSON 中的 "467441" 或 "467440"，這裡暫定為 467440)
    "屏東縣": "467590",   # 恆春氣象站 (對應 JSON 中的 "467590")
    
    # 東部地區
    "宜蘭縣": "C0U730",   # 宜蘭 (請核對此 ID 是否為有效紫外線測站ID)
    "花蓮縣": "C0U9C0",   # 花蓮 (請核對此 ID 是否為有效紫外線測站ID)
    "臺東縣": "C0V320",   # 臺東 (請核對此 ID 是否為有效紫外線測站ID)
    "台東縣": "C0V320",   # 兼容別名
    
    # 離島地區
    "澎湖縣": "467350",   # 澎湖氣象站 (對應 JSON 中的 "467350")
    "金門縣": "467110",   # 金門氣象站 (對應 JSON 中的 "467110")
    "連江縣": "467990",   # 馬祖氣象站 (對應 JSON 中的 "467990")
    
    # 行政區更精確的映射（範例，可根據需求擴充）
    "臺北市大安區": "466920", 
    "臺中市北屯區": "467490", 
    "高雄市左營區": "467440", # 假定使用高雄站
}

# 您可以添加一個輔助函式，用於根據縣市名稱或行政區名稱獲取 StationID
def get_uv_station_id(city_name: str) -> str | None:
    """
    根據城市名稱或行政區名稱獲取對應的紫外線測站 ID。

    Args:
        city_name (str): 用戶查詢的城市或行政區名稱。

    Returns:
        str | None: 對應的測站 ID，如果沒有找到則返回 None。
    """
    # 優先嘗試精確匹配用戶輸入的城市
    station_id = UV_STATION_MAPPING.get(city_name)

    # 如果沒有精確匹配，嘗試從 UV_STATION_MAPPING 的鍵中尋找包含關係
    # 這種方式可以處理「臺中市北屯區」匹配到「臺中市」的情況
    if not station_id:
        for mapped_city, s_id in UV_STATION_MAPPING.items():
            if city_name.startswith(mapped_city): # 檢查用戶輸入是否以映射表中的城市開頭
                station_id = s_id
                break

    normalized_location_name = normalize_city_name(city_name)

    # 如果還是沒有找到，可以考慮一些簡稱或特殊處理
    # 例如，如果用戶輸入 "台中"，但映射表只有 "臺中市"
    if not station_id:
        station_id = UV_STATION_MAPPING.get(normalized_location_name)

    return station_id